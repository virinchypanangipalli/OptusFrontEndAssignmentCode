{"version":3,"sources":["Progress.jsx","ProgressBar.jsx","App.js","reportWebVitals.js","index.js"],"names":["Progress","bar","className","style","opacity","width","background","color","ProgressBar","useState","bars","setbars","selectedBar","setselectedBar","buttons","setbuttons","maxlimit","setMaxLimit","useEffect","getbars","axios","get","then","res","data","forEach","barObj","push","limit","catch","error","alert","length","map","i","name","value","onChange","e","target","handleChange","button","onClick","val","newBar","allBars","handleBtnClick","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iRAeeA,EAbE,SAAC,GAAa,IAAXC,EAAU,EAAVA,IAClB,OACE,qBAAKC,UAAU,WAAf,SACE,qBACEA,UAAU,gBACVC,MAAO,CAAEC,QAAS,EAAGC,MAAM,GAAD,OAAKJ,EAAIA,IAAT,KAAiBK,WAAYL,EAAIK,YAF7D,SAIE,uBAAMH,MAAO,CAAEI,MAAON,EAAIM,OAA1B,UAAoCN,EAAIA,IAAxC,YCLKO,EAAc,WAAM,MAGPC,mBAAS,IAHF,mBAGxBC,EAHwB,KAGlBC,EAHkB,OAIOF,mBAAS,GAJhB,mBAIxBG,EAJwB,KAIXC,EAJW,OAKDJ,mBAAS,IALR,mBAKxBK,EALwB,KAKfC,EALe,OAMCN,mBAAS,KANV,mBAMxBO,EANwB,KAMdC,EANc,KAU/BC,qBAAU,WACRC,MACC,IAEH,IAIMA,EAAU,WACdC,IACGC,IAAI,qCACJC,MAAK,SAACC,GACL,IAAIb,EAAO,GACXa,EAAIC,KAAKd,KAAKe,SAAQ,SAACxB,GACrB,IAAIyB,EAAS,CAAEzB,IAAIA,EAAKK,WAAY,YAAaC,MAAO,SACrC,kBAARN,GACTS,EAAKiB,KAAKD,MAGbhB,GACDC,EAAQD,GAEPa,EAAIC,KAAKV,SACVC,EAAWQ,EAAIC,KAAKV,SAEnBS,EAAIC,KAAKI,OACVX,EAAYM,EAAIC,KAAKI,UAGtBC,OAAM,SAACC,GACNC,MAAMD,OAqBZ,OACE,sBAAK5B,UAAU,YAAf,UACE,oBAAIA,UAAU,cAAd,gCACA,sBAAKA,UAAU,WAAf,UACE,qBAAKA,UAAU,WACf,sBAAKA,UAAU,SAAf,UACGQ,EAAKsB,OAAS,GACbtB,EAAKuB,KAAI,SAAChC,EAAKiC,GAAN,OACP,sBAAahC,UAAU,MAAvB,UACsB,kBAAZD,EAAIA,KAAoB,cAAC,EAAD,CAAUA,IAAKA,IAC3B,kBAAZA,EAAIA,KACV,8FAHMiC,MASG,IAAhBxB,EAAKsB,QAAgB,8CACtB,qBAAK9B,UAAU,cAAf,SACE,qBAAIA,UAAU,GAAd,UACE,+BACGQ,EAAKsB,OAAS,GACb,wBACEG,KAAK,MACLC,MAAOxB,EACPyB,SAAU,SAACC,IAxER,SAACA,GACpBzB,EAAeyB,EAAEC,OAAOH,OAwENI,CAAaF,IAJjB,SAOG5B,EAAKuB,KAAI,SAAChC,EAAKiC,GAAN,OACR,yBAAgBE,MAAOF,EAAvB,wBACcA,EAAI,IADLA,QAKhB,OAEJpB,EAAQmB,KAAI,SAACQ,EAAQP,GAAT,OACX,6BACE,wBACEQ,QAAS,YA1DJ,SAACC,GACtB,IAAIC,EAAM,eAAQlC,EAAKE,IACvBgC,EAAO3C,IAAM2C,EAAO3C,IAAM0C,EACtBC,EAAO3C,KAAOe,GAChB4B,EAAOtC,WAAa,MACpBsC,EAAOrC,MAAQ,UAEXqC,EAAO3C,KAAO,IAChB2C,EAAO3C,IAAM,GAEf2C,EAAOtC,WAAa,YACpBsC,EAAOrC,MAAQ,SAEjB,IAAIsC,EAAO,YAAOnC,GAClBmC,EAAQjC,GAAegC,EACvBjC,EAAQkC,GA4CUC,CAAeL,IAFnB,SAKGA,KANIP,cAajB,qBAAKhC,UAAU,eCzGR6C,MARf,WACE,OACE,qBAAK7C,UAAU,MAAf,SACE,cAAC,EAAD,OCMS8C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB5B,MAAK,YAAkD,IAA/C6B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCFdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.0525b0f9.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Progress = ({ bar }) => {\r\n  return (\r\n    <div className=\"progress\">\r\n      <div\r\n        className=\"progress-done\"\r\n        style={{ opacity: 1, width: `${bar.bar}%`, background: bar.background }}\r\n      >\r\n        <span style={{ color: bar.color }}>{bar.bar}%</span>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Progress;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport Progress from \"./Progress\";\r\n\r\nexport const ProgressBar = () => {\r\n  //Hooks to create Progress Bars, drop down , Buttons. \r\n  //Each Hook expects two arguments . First is the variable , second is the event to change value of the variable. \r\n  const [bars, setbars] = useState([]);\r\n  const [selectedBar, setselectedBar] = useState(0);\r\n  const [buttons, setbuttons] = useState([]);\r\n  const [maxlimit, setMaxLimit] = useState(100);\r\n  \r\n  \r\n  //This Hook triggers after the component is loaded and generates the progrss bars from API\r\n  useEffect(() => {\r\n    getbars();\r\n  }, []);\r\n\r\n  const handleChange = (e) => {\r\n    setselectedBar(e.target.value);\r\n  };\r\n\r\n  const getbars = () => {\r\n    axios\r\n      .get(\"https://pb-api.herokuapp.com/bars\")\r\n      .then((res) => {\r\n        let bars = [];\r\n        res.data.bars.forEach((bar) => {\r\n          let barObj = { bar:bar, background: \"lightblue\", color: \"black\" };\r\n          if (typeof bar === \"number\") {\r\n            bars.push(barObj);\r\n          }\r\n        });\r\n      if(bars){\r\n        setbars(bars);\r\n      }\r\n      if(res.data.buttons){\r\n        setbuttons(res.data.buttons);\r\n      }\r\n      if(res.data.limit){\r\n        setMaxLimit(res.data.limit);\r\n      }\r\n      })\r\n      .catch((error) => {\r\n        alert(error);\r\n      });\r\n  };\r\n  const handleBtnClick = (val) => {\r\n    let newBar = { ...bars[selectedBar] };\r\n    newBar.bar = newBar.bar + val;\r\n    if (newBar.bar >= maxlimit) {\r\n      newBar.background = \"red\";\r\n      newBar.color = \"white\";\r\n    } else {\r\n      if (newBar.bar <= 0) {\r\n        newBar.bar = 0;\r\n      }\r\n      newBar.background = \"lightblue\";\r\n      newBar.color = \"black\";\r\n    }\r\n    let allBars = [...bars];\r\n    allBars[selectedBar] = newBar;\r\n    setbars(allBars);\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <h3 className=\"text-center\">Progress Bars Demo</h3>\r\n      <div className=\"row bars\">\r\n        <div className=\"col-sm\"></div>\r\n        <div className=\"col-sm\">\r\n          {bars.length > 0 &&\r\n            bars.map((bar, i) => (\r\n              <div key={i} className=\"col\">\r\n                {typeof bar.bar === \"number\" && <Progress bar={bar} />}\r\n                {typeof bar.bar !== \"number\" && (\r\n                  <div>\r\n                    Error Loading Progressbar .. Please Refresh and try again\r\n                  </div>\r\n                )}\r\n              </div>\r\n            ))}\r\n          {bars.length === 0 && <div>Loading....</div>}\r\n          <div className=\"row buttons\">\r\n            <ul className=\"\">\r\n              <li>\r\n                {bars.length > 0 && (\r\n                  <select\r\n                    name=\"bar\"\r\n                    value={selectedBar}\r\n                    onChange={(e) => {\r\n                      handleChange(e);\r\n                    }}\r\n                  >\r\n                    {bars.map((bar, i) => (\r\n                      <option key={i} value={i}>\r\n                        Progress # {i + 1}\r\n                      </option>\r\n                    ))}\r\n                  </select>\r\n                )}{\" \"}\r\n              </li>\r\n              {buttons.map((button, i) => (\r\n                <li key={i}>\r\n                  <button\r\n                    onClick={() => {\r\n                      handleBtnClick(button, i);\r\n                    }}\r\n                  >\r\n                    {button}\r\n                  </button>\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n        </div>\r\n        <div className=\"col\"></div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import \"./App.css\";\nimport { ProgressBar } from \"./ProgressBar\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ProgressBar />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}