{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/virinchyp/Documents/GitHub/OptusFrontEndAssignmentCode/src/ProgressBar.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport Progress from \"./Progress\";\nexport const ProgressBar = () => {\n  _s();\n\n  //Hooks to create Progress Bars, drop down , Buttons. \n  //Each Hook expects two arguments . First is the variable , second is the event to change value of the variable. \n  const [bars, setbars] = useState([]);\n  const [selectedBar, setselectedBar] = useState(0);\n  const [buttons, setbuttons] = useState([]);\n  const [maxlimit, setMaxLimit] = useState(0); //This Hook triggers after the component is loaded and generates the progrss bars from API\n\n  useEffect(() => {\n    getbars();\n  }, []);\n\n  const handleChange = e => {\n    setselectedBar(e.target.value);\n  };\n\n  const getbars = () => {\n    axios.get(\"https://pb-api.herokuapp.com/bars\").then(res => {\n      let bars = [];\n      res.data.bars.forEach(bar => {\n        let barObj = {\n          bar: bar,\n          background: \"lightblue\",\n          color: \"black\"\n        };\n\n        if (typeof bar === \"number\") {\n          bars.push(barObj);\n        }\n      });\n      setbars(bars);\n      setbuttons(res.data.buttons);\n    }).catch(error => {\n      alert(error);\n    });\n  };\n\n  const handleBtnClick = val => {\n    let newBar = { ...bars[selectedBar]\n    };\n    newBar.bar = newBar.bar + val;\n\n    if (newBar.bar >= 100) {\n      newBar.background = \"red\";\n      newBar.color = \"white\";\n    } else {\n      if (newBar.bar <= 0) {\n        newBar.bar = 0;\n      }\n\n      newBar.background = \"lightblue\";\n      newBar.color = \"black\";\n    }\n\n    let allBars = [...bars];\n    allBars[selectedBar] = newBar;\n    setbars(allBars);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"text-center\",\n      children: \"Progress Bars Demo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row bars\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-sm\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-sm\",\n        children: [bars.length > 0 && bars.map((bar, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col\",\n          children: [typeof bar.bar === \"number\" && /*#__PURE__*/_jsxDEV(Progress, {\n            bar: bar\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 49\n          }, this), typeof bar.bar !== \"number\" && /*#__PURE__*/_jsxDEV(\"div\", {\n            children: \"Error Loading Progressbar .. Please Refresh and try again\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 19\n          }, this)]\n        }, i, true, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 15\n        }, this)), bars.length === 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Loading....\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 33\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row buttons\",\n          children: /*#__PURE__*/_jsxDEV(\"ul\", {\n            className: \"\",\n            children: [/*#__PURE__*/_jsxDEV(\"li\", {\n              children: [bars.length > 0 && /*#__PURE__*/_jsxDEV(\"select\", {\n                name: \"bar\",\n                value: selectedBar,\n                onChange: e => {\n                  handleChange(e);\n                },\n                children: bars.map((bar, i) => /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: i,\n                  children: [\"Progress # \", i + 1]\n                }, i, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 91,\n                  columnNumber: 23\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 83,\n                columnNumber: 19\n              }, this), \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 15\n            }, this), buttons.map((button, i) => /*#__PURE__*/_jsxDEV(\"li\", {\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => {\n                  handleBtnClick(button, i);\n                },\n                children: button\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 100,\n                columnNumber: 19\n              }, this)\n            }, i, false, {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 17\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ProgressBar, \"FrVGM4Z0YaBL3fVW6nWA7MekCH4=\");\n\n_c = ProgressBar;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProgressBar\");","map":{"version":3,"sources":["/Users/virinchyp/Documents/GitHub/OptusFrontEndAssignmentCode/src/ProgressBar.jsx"],"names":["React","useEffect","useState","axios","Progress","ProgressBar","bars","setbars","selectedBar","setselectedBar","buttons","setbuttons","maxlimit","setMaxLimit","getbars","handleChange","e","target","value","get","then","res","data","forEach","bar","barObj","background","color","push","catch","error","alert","handleBtnClick","val","newBar","allBars","length","map","i","button"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport Progress from \"./Progress\";\r\n\r\nexport const ProgressBar = () => {\r\n  //Hooks to create Progress Bars, drop down , Buttons. \r\n  //Each Hook expects two arguments . First is the variable , second is the event to change value of the variable. \r\n  const [bars, setbars] = useState([]);\r\n  const [selectedBar, setselectedBar] = useState(0);\r\n  const [buttons, setbuttons] = useState([]);\r\n  const [maxlimit, setMaxLimit] = useState(0);\r\n  \r\n  \r\n  //This Hook triggers after the component is loaded and generates the progrss bars from API\r\n  useEffect(() => {\r\n    getbars();\r\n  }, []);\r\n\r\n  const handleChange = (e) => {\r\n    setselectedBar(e.target.value);\r\n  };\r\n\r\n  const getbars = () => {\r\n    axios\r\n      .get(\"https://pb-api.herokuapp.com/bars\")\r\n      .then((res) => {\r\n        let bars = [];\r\n        res.data.bars.forEach((bar) => {\r\n          let barObj = { bar:bar, background: \"lightblue\", color: \"black\" };\r\n          if (typeof bar === \"number\") {\r\n            bars.push(barObj);\r\n          }\r\n        });\r\n\r\n        setbars(bars);\r\n        setbuttons(res.data.buttons);\r\n\r\n      })\r\n      .catch((error) => {\r\n        alert(error);\r\n      });\r\n  };\r\n  const handleBtnClick = (val) => {\r\n    let newBar = { ...bars[selectedBar] };\r\n    newBar.bar = newBar.bar + val;\r\n    if (newBar.bar >= 100) {\r\n      newBar.background = \"red\";\r\n      newBar.color = \"white\";\r\n    } else {\r\n      if (newBar.bar <= 0) {\r\n        newBar.bar = 0;\r\n      }\r\n      newBar.background = \"lightblue\";\r\n      newBar.color = \"black\";\r\n    }\r\n    let allBars = [...bars];\r\n    allBars[selectedBar] = newBar;\r\n    setbars(allBars);\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <h3 className=\"text-center\">Progress Bars Demo</h3>\r\n      <div className=\"row bars\">\r\n        <div className=\"col-sm\"></div>\r\n        <div className=\"col-sm\">\r\n          {bars.length > 0 &&\r\n            bars.map((bar, i) => (\r\n              <div key={i} className=\"col\">\r\n                {typeof bar.bar === \"number\" && <Progress bar={bar} />}\r\n                {typeof bar.bar !== \"number\" && (\r\n                  <div>\r\n                    Error Loading Progressbar .. Please Refresh and try again\r\n                  </div>\r\n                )}\r\n              </div>\r\n            ))}\r\n          {bars.length === 0 && <div>Loading....</div>}\r\n          <div className=\"row buttons\">\r\n            <ul className=\"\">\r\n              <li>\r\n                {bars.length > 0 && (\r\n                  <select\r\n                    name=\"bar\"\r\n                    value={selectedBar}\r\n                    onChange={(e) => {\r\n                      handleChange(e);\r\n                    }}\r\n                  >\r\n                    {bars.map((bar, i) => (\r\n                      <option key={i} value={i}>\r\n                        Progress # {i + 1}\r\n                      </option>\r\n                    ))}\r\n                  </select>\r\n                )}{\" \"}\r\n              </li>\r\n              {buttons.map((button, i) => (\r\n                <li key={i}>\r\n                  <button\r\n                    onClick={() => {\r\n                      handleBtnClick(button, i);\r\n                    }}\r\n                  >\r\n                    {button}\r\n                  </button>\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n        </div>\r\n        <div className=\"col\"></div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}